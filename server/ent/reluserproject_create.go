// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"favorite/ent/reluserproject"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RelUserProjectCreate is the builder for creating a RelUserProject entity.
type RelUserProjectCreate struct {
	config
	mutation *RelUserProjectMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (rupc *RelUserProjectCreate) SetUUID(s string) *RelUserProjectCreate {
	rupc.mutation.SetUUID(s)
	return rupc
}

// SetProject sets the "project" field.
func (rupc *RelUserProjectCreate) SetProject(s string) *RelUserProjectCreate {
	rupc.mutation.SetProject(s)
	return rupc
}

// SetUser sets the "user" field.
func (rupc *RelUserProjectCreate) SetUser(s string) *RelUserProjectCreate {
	rupc.mutation.SetUser(s)
	return rupc
}

// SetID sets the "id" field.
func (rupc *RelUserProjectCreate) SetID(s string) *RelUserProjectCreate {
	rupc.mutation.SetID(s)
	return rupc
}

// Mutation returns the RelUserProjectMutation object of the builder.
func (rupc *RelUserProjectCreate) Mutation() *RelUserProjectMutation {
	return rupc.mutation
}

// Save creates the RelUserProject in the database.
func (rupc *RelUserProjectCreate) Save(ctx context.Context) (*RelUserProject, error) {
	var (
		err  error
		node *RelUserProject
	)
	if len(rupc.hooks) == 0 {
		if err = rupc.check(); err != nil {
			return nil, err
		}
		node, err = rupc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RelUserProjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rupc.check(); err != nil {
				return nil, err
			}
			rupc.mutation = mutation
			if node, err = rupc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rupc.hooks) - 1; i >= 0; i-- {
			if rupc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rupc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rupc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*RelUserProject)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RelUserProjectMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rupc *RelUserProjectCreate) SaveX(ctx context.Context) *RelUserProject {
	v, err := rupc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rupc *RelUserProjectCreate) Exec(ctx context.Context) error {
	_, err := rupc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rupc *RelUserProjectCreate) ExecX(ctx context.Context) {
	if err := rupc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rupc *RelUserProjectCreate) check() error {
	if _, ok := rupc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "RelUserProject.uuid"`)}
	}
	if _, ok := rupc.mutation.Project(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required field "RelUserProject.project"`)}
	}
	if _, ok := rupc.mutation.User(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required field "RelUserProject.user"`)}
	}
	return nil
}

func (rupc *RelUserProjectCreate) sqlSave(ctx context.Context) (*RelUserProject, error) {
	_node, _spec := rupc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rupc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected RelUserProject.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (rupc *RelUserProjectCreate) createSpec() (*RelUserProject, *sqlgraph.CreateSpec) {
	var (
		_node = &RelUserProject{config: rupc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: reluserproject.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: reluserproject.FieldID,
			},
		}
	)
	if id, ok := rupc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rupc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reluserproject.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := rupc.mutation.Project(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reluserproject.FieldProject,
		})
		_node.Project = value
	}
	if value, ok := rupc.mutation.User(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reluserproject.FieldUser,
		})
		_node.User = value
	}
	return _node, _spec
}

// RelUserProjectCreateBulk is the builder for creating many RelUserProject entities in bulk.
type RelUserProjectCreateBulk struct {
	config
	builders []*RelUserProjectCreate
}

// Save creates the RelUserProject entities in the database.
func (rupcb *RelUserProjectCreateBulk) Save(ctx context.Context) ([]*RelUserProject, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rupcb.builders))
	nodes := make([]*RelUserProject, len(rupcb.builders))
	mutators := make([]Mutator, len(rupcb.builders))
	for i := range rupcb.builders {
		func(i int, root context.Context) {
			builder := rupcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RelUserProjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rupcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rupcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rupcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rupcb *RelUserProjectCreateBulk) SaveX(ctx context.Context) []*RelUserProject {
	v, err := rupcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rupcb *RelUserProjectCreateBulk) Exec(ctx context.Context) error {
	_, err := rupcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rupcb *RelUserProjectCreateBulk) ExecX(ctx context.Context) {
	if err := rupcb.Exec(ctx); err != nil {
		panic(err)
	}
}
