// Code generated by ent, DO NOT EDIT.

package reluserproject

import (
	"favorite/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// Project applies equality check predicate on the "project" field. It's identical to ProjectEQ.
func Project(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProject), v))
	})
}

// User applies equality check predicate on the "user" field. It's identical to UserEQ.
func User(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUser), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.RelUserProject {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.RelUserProject {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUUID), v))
	})
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUUID), v))
	})
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUUID), v))
	})
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUUID), v))
	})
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUUID), v))
	})
}

// ProjectEQ applies the EQ predicate on the "project" field.
func ProjectEQ(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProject), v))
	})
}

// ProjectNEQ applies the NEQ predicate on the "project" field.
func ProjectNEQ(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProject), v))
	})
}

// ProjectIn applies the In predicate on the "project" field.
func ProjectIn(vs ...string) predicate.RelUserProject {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProject), v...))
	})
}

// ProjectNotIn applies the NotIn predicate on the "project" field.
func ProjectNotIn(vs ...string) predicate.RelUserProject {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProject), v...))
	})
}

// ProjectGT applies the GT predicate on the "project" field.
func ProjectGT(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProject), v))
	})
}

// ProjectGTE applies the GTE predicate on the "project" field.
func ProjectGTE(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProject), v))
	})
}

// ProjectLT applies the LT predicate on the "project" field.
func ProjectLT(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProject), v))
	})
}

// ProjectLTE applies the LTE predicate on the "project" field.
func ProjectLTE(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProject), v))
	})
}

// ProjectContains applies the Contains predicate on the "project" field.
func ProjectContains(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProject), v))
	})
}

// ProjectHasPrefix applies the HasPrefix predicate on the "project" field.
func ProjectHasPrefix(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProject), v))
	})
}

// ProjectHasSuffix applies the HasSuffix predicate on the "project" field.
func ProjectHasSuffix(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProject), v))
	})
}

// ProjectEqualFold applies the EqualFold predicate on the "project" field.
func ProjectEqualFold(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProject), v))
	})
}

// ProjectContainsFold applies the ContainsFold predicate on the "project" field.
func ProjectContainsFold(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProject), v))
	})
}

// UserEQ applies the EQ predicate on the "user" field.
func UserEQ(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUser), v))
	})
}

// UserNEQ applies the NEQ predicate on the "user" field.
func UserNEQ(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUser), v))
	})
}

// UserIn applies the In predicate on the "user" field.
func UserIn(vs ...string) predicate.RelUserProject {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUser), v...))
	})
}

// UserNotIn applies the NotIn predicate on the "user" field.
func UserNotIn(vs ...string) predicate.RelUserProject {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUser), v...))
	})
}

// UserGT applies the GT predicate on the "user" field.
func UserGT(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUser), v))
	})
}

// UserGTE applies the GTE predicate on the "user" field.
func UserGTE(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUser), v))
	})
}

// UserLT applies the LT predicate on the "user" field.
func UserLT(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUser), v))
	})
}

// UserLTE applies the LTE predicate on the "user" field.
func UserLTE(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUser), v))
	})
}

// UserContains applies the Contains predicate on the "user" field.
func UserContains(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUser), v))
	})
}

// UserHasPrefix applies the HasPrefix predicate on the "user" field.
func UserHasPrefix(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUser), v))
	})
}

// UserHasSuffix applies the HasSuffix predicate on the "user" field.
func UserHasSuffix(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUser), v))
	})
}

// UserEqualFold applies the EqualFold predicate on the "user" field.
func UserEqualFold(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUser), v))
	})
}

// UserContainsFold applies the ContainsFold predicate on the "user" field.
func UserContainsFold(v string) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUser), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RelUserProject) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RelUserProject) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RelUserProject) predicate.RelUserProject {
	return predicate.RelUserProject(func(s *sql.Selector) {
		p(s.Not())
	})
}
