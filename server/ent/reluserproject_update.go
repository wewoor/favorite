// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"favorite/ent/predicate"
	"favorite/ent/reluserproject"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RelUserProjectUpdate is the builder for updating RelUserProject entities.
type RelUserProjectUpdate struct {
	config
	hooks    []Hook
	mutation *RelUserProjectMutation
}

// Where appends a list predicates to the RelUserProjectUpdate builder.
func (rupu *RelUserProjectUpdate) Where(ps ...predicate.RelUserProject) *RelUserProjectUpdate {
	rupu.mutation.Where(ps...)
	return rupu
}

// SetUUID sets the "uuid" field.
func (rupu *RelUserProjectUpdate) SetUUID(s string) *RelUserProjectUpdate {
	rupu.mutation.SetUUID(s)
	return rupu
}

// SetProject sets the "project" field.
func (rupu *RelUserProjectUpdate) SetProject(s string) *RelUserProjectUpdate {
	rupu.mutation.SetProject(s)
	return rupu
}

// SetUser sets the "user" field.
func (rupu *RelUserProjectUpdate) SetUser(s string) *RelUserProjectUpdate {
	rupu.mutation.SetUser(s)
	return rupu
}

// Mutation returns the RelUserProjectMutation object of the builder.
func (rupu *RelUserProjectUpdate) Mutation() *RelUserProjectMutation {
	return rupu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rupu *RelUserProjectUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rupu.hooks) == 0 {
		affected, err = rupu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RelUserProjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rupu.mutation = mutation
			affected, err = rupu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rupu.hooks) - 1; i >= 0; i-- {
			if rupu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rupu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rupu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rupu *RelUserProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := rupu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rupu *RelUserProjectUpdate) Exec(ctx context.Context) error {
	_, err := rupu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rupu *RelUserProjectUpdate) ExecX(ctx context.Context) {
	if err := rupu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rupu *RelUserProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reluserproject.Table,
			Columns: reluserproject.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: reluserproject.FieldID,
			},
		},
	}
	if ps := rupu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rupu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reluserproject.FieldUUID,
		})
	}
	if value, ok := rupu.mutation.Project(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reluserproject.FieldProject,
		})
	}
	if value, ok := rupu.mutation.User(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reluserproject.FieldUser,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rupu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reluserproject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// RelUserProjectUpdateOne is the builder for updating a single RelUserProject entity.
type RelUserProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RelUserProjectMutation
}

// SetUUID sets the "uuid" field.
func (rupuo *RelUserProjectUpdateOne) SetUUID(s string) *RelUserProjectUpdateOne {
	rupuo.mutation.SetUUID(s)
	return rupuo
}

// SetProject sets the "project" field.
func (rupuo *RelUserProjectUpdateOne) SetProject(s string) *RelUserProjectUpdateOne {
	rupuo.mutation.SetProject(s)
	return rupuo
}

// SetUser sets the "user" field.
func (rupuo *RelUserProjectUpdateOne) SetUser(s string) *RelUserProjectUpdateOne {
	rupuo.mutation.SetUser(s)
	return rupuo
}

// Mutation returns the RelUserProjectMutation object of the builder.
func (rupuo *RelUserProjectUpdateOne) Mutation() *RelUserProjectMutation {
	return rupuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rupuo *RelUserProjectUpdateOne) Select(field string, fields ...string) *RelUserProjectUpdateOne {
	rupuo.fields = append([]string{field}, fields...)
	return rupuo
}

// Save executes the query and returns the updated RelUserProject entity.
func (rupuo *RelUserProjectUpdateOne) Save(ctx context.Context) (*RelUserProject, error) {
	var (
		err  error
		node *RelUserProject
	)
	if len(rupuo.hooks) == 0 {
		node, err = rupuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RelUserProjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rupuo.mutation = mutation
			node, err = rupuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rupuo.hooks) - 1; i >= 0; i-- {
			if rupuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rupuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rupuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*RelUserProject)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RelUserProjectMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rupuo *RelUserProjectUpdateOne) SaveX(ctx context.Context) *RelUserProject {
	node, err := rupuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rupuo *RelUserProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := rupuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rupuo *RelUserProjectUpdateOne) ExecX(ctx context.Context) {
	if err := rupuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rupuo *RelUserProjectUpdateOne) sqlSave(ctx context.Context) (_node *RelUserProject, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reluserproject.Table,
			Columns: reluserproject.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: reluserproject.FieldID,
			},
		},
	}
	id, ok := rupuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RelUserProject.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rupuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reluserproject.FieldID)
		for _, f := range fields {
			if !reluserproject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reluserproject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rupuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rupuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reluserproject.FieldUUID,
		})
	}
	if value, ok := rupuo.mutation.Project(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reluserproject.FieldProject,
		})
	}
	if value, ok := rupuo.mutation.User(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reluserproject.FieldUser,
		})
	}
	_node = &RelUserProject{config: rupuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rupuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reluserproject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
